name: Deploy Backend

# 触发条件：推送到main分支且后端代码有变化
on:
  pull_request:
    branches: [main]
    paths:
      - 'apps/backend/**'
      - 'packages/**'

# 环境变量
env:
  REGISTRY: registry.cn-chengdu.aliyuncs.com
  IMAGE_NAME: docker-tzd/mechanicendworld
  BACKEND_PATH: apps/backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 设置Bun环境
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: '1.2.21'

      # 安装依赖
      - name: Install dependencies
        run: |
          cd ${{ env.BACKEND_PATH }}
          bun install

      # 类型检查
      - name: Type check
        run: |
          cd ${{ env.BACKEND_PATH }}
          bun run type-check

      # 构建应用
      - name: Build application
        run: |
          cd ${{ env.BACKEND_PATH }}
          bun run build

      # 设置Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 登录到阿里云容器镜像服务
      - name: Login to Alibaba Cloud Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.ALIYUN_REGISTRY_USERNAME }}
          password: ${{ secrets.ALIYUN_REGISTRY_PASSWORD }}

      # 构建并推送Docker镜像
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.BACKEND_PATH }}
          file: ${{ env.BACKEND_PATH }}/.container/prod/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 部署到服务器
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT || 22 }}
          script: |
            # 进入项目目录
            cd /path/to/your/project/backend

            # 拉取最新镜像
            docker-compose -f .container/prod/docker-compose.prod.yml pull

            # 重启服务
            docker-compose -f .container/prod/docker-compose.prod.yml up -d

            # 清理旧镜像
            docker image prune -f

            # 检查服务状态
            docker-compose -f .container/prod/docker-compose.prod.yml ps

      # 健康检查
      - name: Health check
        run: |
          sleep 30
          curl -f ${{ secrets.BACKEND_URL }}/health || exit 1
        continue-on-error: true

      # 通知部署结果
      - name: Notify deployment result
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ 后端部署成功！"
          else
            echo "❌ 后端部署失败！"
          fi
