# 统一部署 Dockerfile
# 包含前端、后端和 Caddy 反向代理的完整镜像

# ================================
# 阶段1: 前端构建
# ================================
FROM node:18-alpine AS frontend-builder

WORKDIR /app

# 安装 pnpm
RUN npm install -g pnpm

# 复制前端项目文件
COPY apps/frontend/package.json apps/frontend/pnpm-lock.yaml ./
RUN pnpm install --frozen-lockfile

# 复制前端源码并构建
COPY apps/frontend/ ./
RUN pnpm run build

# ================================
# 阶段2: 后端构建
# ================================
FROM oven/bun:1-alpine AS backend-builder

WORKDIR /app

# 复制后端项目文件
COPY apps/backend/package.json apps/backend/bun.lockb ./
RUN bun install --frozen-lockfile

# 复制后端源码
COPY apps/backend/ ./

# 构建后端可执行文件
RUN bun build --compile --target bun --outfile server index.ts

# ================================
# 阶段3: 最终镜像 - 基于 Caddy
# ================================
FROM caddy:2-alpine

# 安装必要工具
RUN apk add --no-cache wget curl

# 创建应用目录
WORKDIR /app

# 从后端构建阶段复制可执行文件
COPY --from=backend-builder /app/server /app/server
COPY --from=backend-builder /app/public /app/public

# 从前端构建阶段复制静态文件
COPY --from=frontend-builder /app/dist /var/www/frontend

# 创建上传目录
RUN mkdir -p /var/www/uploads

# 复制 Caddyfile 配置（内置到镜像中）
COPY <<EOF /etc/caddy/Caddyfile
# 统一部署 Caddyfile 配置
# 前端和后端服务的反向代理配置

# 主域名 - 前端服务
{\$DOMAIN:localhost} {
    # 后端 API 路径
    handle_path /api/* {
        reverse_proxy localhost:3001 {
            health_uri /health
            health_interval 30s
            health_timeout 5s
        }
    }

    # 上传文件服务
    handle_path /uploads/* {
        root * /var/www
        file_server
        header {
            Cache-Control "public, max-age=86400"
        }
    }

    # 前端静态文件服务
    handle {
        root * /var/www/frontend
        
        # 静态资源缓存
        @static {
            path *.css *.js *.png *.jpg *.jpeg *.gif *.ico *.svg *.woff *.woff2 *.ttf *.eot
        }
        header @static {
            Cache-Control "public, max-age=31536000, immutable"
        }
        
        # 启用压缩
        encode gzip zstd
        
        # 静态文件服务
        file_server
        
        # SPA 路由回退
        try_files {path} /index.html
    }

    # 安全头
    header {
        X-Content-Type-Options "nosniff"
        X-Frame-Options "SAMEORIGIN"
        X-XSS-Protection "1; mode=block"
        Referrer-Policy "strict-origin-when-cross-origin"
    }

    # 日志
    log {
        output file /var/log/caddy/access.log
        format json
    }
}

# 开发环境端口访问
:80 {
    redir https://{host}{uri} permanent
}

# 健康检查端点
:2019 {
    metrics /metrics
}
EOF

# 创建启动脚本
COPY <<EOF /app/start.sh
#!/bin/sh
set -e

echo "🚀 启动统一部署服务..."

# 启动后端服务（后台运行）
echo "📱 启动后端服务..."
cd /app
./server &
BACKEND_PID=\$!

# 等待后端服务启动
echo "⏳ 等待后端服务启动..."
sleep 5

# 检查后端服务是否正常
for i in \$(seq 1 10); do
    if wget -q --spider http://localhost:3001/health 2>/dev/null; then
        echo "✅ 后端服务启动成功"
        break
    fi
    echo "⏳ 等待后端服务... (\$i/10)"
    sleep 2
done

# 启动 Caddy（前台运行）
echo "🌐 启动 Caddy 反向代理..."
exec caddy run --config /etc/caddy/Caddyfile --adapter caddyfile
EOF

# 设置执行权限
RUN chmod +x /app/start.sh /app/server

# 创建日志目录
RUN mkdir -p /var/log/caddy

# 暴露端口
EXPOSE 80 443 2019

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD wget -q --spider http://localhost/api/health || exit 1

# 设置环境变量
ENV NODE_ENV=production
ENV APP_PORT=3001
ENV DOMAIN=localhost

# 启动服务
CMD ["/app/start.sh"]